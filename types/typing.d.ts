/// <reference types="react" />
export interface UseRender {
    /**
     * Hook where the render will be generated by its keyName
     * @param keyName keyName to identify by render
     * @param index its additional
     */
    (keyName?: string, index?: number | string): () => void;
}
export interface Render {
    /**
     * Generate render to component for yours keyName registered
     * @param keyName keyName for render
     * @param index aditional
     * @returns if a registered component is found and deployed, it will be true.
     */
    (keyName: string, index?: number | string): boolean;
}
export interface AsyncRender {
    /**
     * Generate render asynchronously to component for yours keyName registered.
     * @param keyName keyName for render
     * @param index aditional
     * @returns if a registered component is found and deployed, it will be true.
     */
    (keyName: string, index?: number | string): Promise<boolean>;
}
export interface Renders {
    /**
     * Generates rendering only to the components registered by their index by their keyName
     * @param keyName keyName of group for render
     * @param omits omit index
     * @returns Returns the amount of render generated to the components displayed by index
     */
    (keyName: string, omits?: Array<string | number>): number;
}
export interface PropsCapsule<T = any> {
    /**
     * Function Component
     */
    children: (props?: T) => JSX.Element;
    /**
     * Key name for render
     */
    keyName: string;
    /**
     * index aditional for render
     */
    index?: string | number | undefined;
    /**
     * Send Props
     */
    props?: T;
}
export interface TypeCapsule {
    /**
     * Helps wrap a component where you want to render by keyName
     * @param props Props Capsule
     * @example
     * <Capsule keyName='MyKeyName' index='1'>
     *  <MyComponent>
     * </Capsule>
     */
    (props: PropsCapsule): JSX.Element;
}
export declare type TypeComponent<T> = (props: React.PropsWithChildren<T>) => JSX.Element;
export declare type Wrapped<T> = (props: React.PropsWithChildren<T>) => JSX.Element;
declare type ConnectComponent<T> = (Component: TypeComponent<T>) => Wrapped<T>;
/**
 * Register component for render by key name
 * @param keyName key name
 * @param index index
 */
export declare type Connect<T> = (keyName: string, index?: string | number) => ConnectComponent<T>;
export interface Registered {
    keyName: string;
    index: number | string | undefined;
    render: () => void | Promise<void>;
}
export {};
