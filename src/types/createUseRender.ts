import { useEffect } from 'react'
import { useForceRender } from '../hooks/useForceRenders'
import { Hook, Connection, Encapsulation } from '../store'
import { __keyNameIndex__ } from '../utils/tools'

export interface UseRender {
    /**
     * Hook where the render will be generated by its keyName
     * @param keyName keyName to identify by render
     * @param index its additional
    */
    (keyName?: string, index?: number|string): () => void
}

export default function createUseRender(registers: Map<string, Hook | Connection | Encapsulation>): UseRender {
    function useRender(keyName?: string, index?: number | string): () => void { 
        const [, forceRender] = useForceRender()

        function setRegister(key: string) {
            const hook: Hook = {
                keyName: key,
                index,
                render: forceRender
            }
            registers.set(__keyNameIndex__(key, index), hook)
        }

        useEffect(() => {
            if(keyName !== undefined){
                setRegister(keyName)
            }
            return () => {
                if(keyName !== undefined){
                    registers.delete(__keyNameIndex__(keyName, index))
                }
            }
        }, [])

        if(keyName !== undefined){
            setRegister(keyName)
        }

        return forceRender
    }

    return useRender
}
